# nitial Weight Matrix W（= Uh・Σ・V）の S から a を求める
# 実行例： python save_tbl.py 0 10

import os
import sys
import time
import numpy as np
import random
import math
import matplotlib.pyplot as plt
import scipy.stats as sps
import scipy.cluster
from scipy.stats import f

import torch
import torch.nn as nn
from torch.autograd import Function
import pynvml
import sow_cpp
#from pdb import set_trace as db

def seed_everything(seed=0):
    """Fix all random seeds"""
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.deterministic = True

def get_S(N, device, dtype):
    """各パラメータの初期値を設定"""
    # Setting a=sqrt(5) in kaiming_uniform is the same as initializing with
    # uniform(-1/sqrt(in_features), 1/sqrt(in_features)). For details, see
    # https://github.com/pytorch/pytorch/issues/57109
    tmpW = torch.empty((N, N), dtype=torch.float64, device=device)
    nn.init.kaiming_uniform_(tmpW, a=math.sqrt(5))
    _, Sigma, _ = torch.linalg.svd(tmpW, full_matrices=False)
    return Sigma.to(dtype)

def main(device, M, S_max):
    seed_everything(seed=0)
    dtype = torch.float64
    N = 2 ** M
    print(f'N={N}, device={device}, dtype={dtype}, S_max={S_max}')

    ### 初期重み行列 W の作成（Sのみ使用）
    # Setting a=sqrt(5) in kaiming_uniform is the same as initializing with
    # uniform(-1/sqrt(in_features), 1/sqrt(in_features)). For details, see
    # https://github.com/pytorch/pytorch/issues/57109
    tmpW = torch.empty((N, N), dtype=torch.float64, device=device)
    nn.init.kaiming_uniform_(tmpW, a=math.sqrt(5))
    U, S, Vt = torch.linalg.svd(tmpW, full_matrices=False)
    ## a の作成
    f = torch.empty((N), dtype=dtype, device=device)
    f[0] = S[0] / S_max
    f[1:N] = S[1:N] / S[0:N-1]
    a = torch.log(f / (1.0 - f))

    ### S_mx, a のファイルへの書き出し
    sow_dict = dict()
    sow_dict['S_max'] = S_max.to('cpu')
    sow_dict['a'] = a.to('cpu')
    #
    print('sow_dict:', type(sow_dict), 'len=', len(sow_dict))
    for k, v in sow_dict.items() :
        if torch.is_tensor(v) : print(' ', k, type(v), v.shape, v.dtype, v.device, v.requires_grad)
        else : print(' ', k, type(v), v)
    #
    torch.save(sow_dict, f'INIT/S%04d.dict' % (N))
    return

if __name__=='__main__':
    if len(sys.argv) != 3 :
        print(F'[USAGE] {sys.argv[0]} gpu M')
        exit()
    gpu = int(sys.argv[1])
    use_cuda = torch.cuda.is_available()
    if use_cuda:
        torch.cuda.set_device(gpu)
        device = torch.device(f'cuda:{gpu}')
    else: raise ValueError("CUDA is not available!!")
    M = int(sys.argv[2])
    ### S_max is alays 1000.0 in my programs.
    S_max = torch.tensor(1000.0, dtype=torch.float64, device=device)
    main(device, M, S_max)
    exit()
